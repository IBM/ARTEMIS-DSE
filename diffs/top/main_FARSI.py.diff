--- ./Project_FARSI_orig/top/main_FARSI.py
+++ ./Project_FARSI/top/main_FARSI.py
@@ -5,7 +5,29 @@
 from SIM_utils.SIM import *
 from DSE_utils.design_space_exploration_handler import  *
 from specs.database_input import *
-import psutil
+from visualization_utils.vis_hardware import vis_hardware
+import shutil
+
+def dump_bottleneck_analysis(sim_dp, result_folder_mod):
+    # Dump csv file of phase timeline for bottleneck analysis.
+    work_rate_analysis_fname = result_folder_mod + f"/{config.bottleneck_stats_result_file}.work_rate.csv"
+    bw_analysis_fname = result_folder_mod + f"/{config.bottleneck_stats_result_file}.thpt_over_bw.csv"
+
+    sim_dp.dp_rep.dp_stats.collect_stats_by_task(work_rate_analysis_fname, bw_analysis_fname)
+    # shutil.copyfile(work_rate_analysis_fname, result_folder_mod + '/' + work_rate_analysis_fname)
+    # shutil.copyfile(bw_analysis_fname, result_folder_mod + '/' + bw_analysis_fname)
+    print(f"@@ Bottleneck analysis results dumped in {work_rate_analysis_fname} and {bw_analysis_fname}.")
+
+def overwrite_init_soc(db_input:database_input_class, result_folder_mod:str):
+    root_dir = os.path.join(config.database_data_dir, "parsing/inputs")
+    workload_dbase_name = '_'.join(db_input.workload_names[0].split('_')[:-1]) + "_database"
+    if config.CONSTRAIN_TOPOLOGY:
+        workload_dbase_name = workload_dbase_name.split('_')
+        workload_dbase_name = '_'.join([workload_dbase_name[0], 'soc', f'{config.SOC_DIM[0]}x{config.SOC_DIM[1]}'] + workload_dbase_name[1:])
+    shutil.copyfile(result_folder_mod+"/hardware_graph_best.csv", root_dir + '/' + workload_dbase_name + " - Hardware Graph.csv")
+    shutil.copyfile(result_folder_mod+"/task_to_hardware_mapping_best.csv", root_dir + '/' + workload_dbase_name + " - Task To Hardware Mapping.csv")
+    print(f"@@ Overwrote file: {root_dir}/{workload_dbase_name} - Hardware Graph.csv")
+    print(f"@@ Overwrote file: {root_dir}/{workload_dbase_name} - Task To Hardware Mapping.csv")
 
 # Run an instance of FARSI, the exploration framework
 # Variables:
@@ -15,7 +37,7 @@
 #   error does the data base has. What should be the population size for each design
 #   and the statistical reduction mode (avg, max, min)
 #   starting_exploration_mode: whether to start from scratch or from an existing check pointed design
-def run_FARSI(result_folder, unique_number, case_study, db_input, hw_sampling, starting_exploration_mode ="generated_from_scratch"):
+def run_FARSI(farsi_start_time:float, result_folder:str, result_folder_mod:str, unique_number:int, case_study:str, db_input:database_input_class, hw_sampling, starting_exploration_mode ="generated_from_scratch"):
     if config.use_cacti:
         print("*****************************")
         print("***** YOU ASKED TO USE CACTI FOR POWER/AREA MODELING OF MEMORY SUBSYSTEM. MAKE SURE YOU HAVE CACTI INSTALLED ****")
@@ -37,7 +59,7 @@
         best_design_sim_this_itr = None
 
         # set up the design handler and the design explorer
-        dse_handler = DSEHandler(result_folder)
+        dse_handler = DSEHandler(farsi_start_time, result_folder, result_folder_mod)
         # First copies the DataBase information (SoC, Blocks(modules), tasks, mappings, scheduling)
         # then chooses among DSE algorithms (hill climbing) and initializes it
         dse_handler.setup_an_explorer(db_input, hw_sampling)
@@ -45,7 +67,11 @@
         # Use the check pointed design, parsed design or generate an simple design point
         dse_handler.prepare_for_exploration(boost_SOC, starting_exploration_mode)
 
+
+        vis_hardware(dse_handler.dse.init_ex_dp, output_folder=result_folder_mod, output_file_name="system_image_default.pdf")
+
         # iterate until you find a design meeting the constraints or terminate if none found
+        met_budget_ctr_with_improvement = 0
         while True:
             # does the simulation for design points (performance, energy, and area core calculations)
             dse_handler.explore()
@@ -56,25 +82,22 @@
             best_design_sim_last_itr = best_design_sim_this_itr
             best_design_sim_this_itr = dse_handler.dse.so_far_best_sim_dp
 
-            if dse_handler.dse.reason_to_terminate == "out_of_memory" or dse_handler.dse.reason_to_terminate == "exploration (total itr_ctr) iteration threshold reached":
-                return dse_handler
-            elif not dse_handler.dse.found_any_improvement and config.heuristic_type == "FARSI":
-                return dse_handler
-            elif not dse_handler.dse.found_any_improvement and dse_handler.dse.reason_to_terminate == "met the budget":
+            if (dse_handler.dse.reason_to_terminate == "exploration timed out" or dse_handler.dse.reason_to_terminate == "out_of_memory" or dse_handler.dse.reason_to_terminate == "exploration (total itr_ctr) iteration threshold reached") or \
+                (not dse_handler.dse.found_any_improvement and config.heuristic_type == "FARSI") or \
+                (not dse_handler.dse.found_any_improvement and dse_handler.dse.reason_to_terminate == "met the budget") or \
+                (dse_handler.dse.reason_to_terminate == "met the budget" and met_budget_ctr_with_improvement > 0):
+                # Export hardware graph and task-to-hardware mapping to file for later reuse.
+                best_design_sim_this_itr.dp_rep.get_hardware_graph().export(result_folder_mod+"/hardware_graph_best.csv", result_folder_mod+"/task_to_hardware_mapping_best.csv")
+                if config.BOTTLENECK_ANALYSIS:
+                    dump_bottleneck_analysis(best_design_sim_this_itr, result_folder_mod)
+                if config.OVERWRITE_INIT_SOC:
+                    overwrite_init_soc(db_input, result_folder_mod)
                 return dse_handler
             else:
+                if(dse_handler.dse.found_any_improvement and dse_handler.dse.reason_to_terminate == "met the budget"):
+                    met_budget_ctr_with_improvement += 1
                 dse_handler.dse.reset_ctrs()
                 dse_handler.dse.init_ex_dp =  dse_handler.dse.so_far_best_ex_dp
-            """
-            elif not best_design_sim_last_itr == None and \
-                    (best_design_sim_this_itr.dp_rep.get_hardware_graph().get_SOC_design_code() ==
-                     best_design_sim_last_itr.dp_rep.get_hardware_graph().get_SOC_design_code()):
-                return dse_handler
-            """
-
-            #if stat_result.fits_budget(1) get_SOC_design_code
-            #return dse_handler
-
 
 def set_up_FARSI_with_arch_gym(result_folder, unique_number, case_study, db_input, hw_sampling, starting_exploration_mode ="generated_from_scratch"):
     starting_exploration_mode = "FARSI_des_passed_in"
@@ -113,7 +136,7 @@
 #   error does the data base has. What should be the population size for each design
 #   and the statistical reduction mode (avg, max, min)
 #   starting_exploration_mode: whether to start from scratch or from an existing check pointed design
-def run_FARSI_only_simulation(result_folder, unique_number, db_input, hw_sampling, starting_exploration_mode ="from_scratch"):
+def run_FARSI_only_simulation(farsi_start_time, result_folder, result_folder_mod, unique_number, db_input, hw_sampling, starting_exploration_mode ="from_scratch"):
     if config.use_cacti:
         print("*****************************")
         print("***** YOU ASKED TO USE CACTI FOR POWER/AREA MODELING OF MEMORY SUBSYSTEM. MAKE SURE YOU HAVE CACTI INSTALLED ****")
@@ -133,7 +156,7 @@
         boost_SOC = False  # specify whether to stick with the old SOC type or boost it
 
         # set up the design handler and the design explorer
-        dse_handler = DSEHandler(result_folder)
+        dse_handler = DSEHandler(farsi_start_time, result_folder, result_folder_mod)
         # First copies the DataBase information (SoC, Blocks(modules), tasks, mappings, scheduling)
         # then chooses among DSE algorithms (hill climbing) and initializes it
         dse_handler.setup_an_explorer(db_input, hw_sampling)
@@ -143,6 +166,12 @@
         # does the simulation for design points (performance, energy, and area core calculations)
         dse_handler.explore_one_design()
         dse_handler.check_point_best_design(unique_number)  # check point
+
+        # Export hardware graph and task-to-hardware mapping to file for later reuse.
+        dse_handler.dse.so_far_best_sim_dp.dp_rep.get_hardware_graph().export(result_folder_mod+"/hardware_graph_best.csv", result_folder_mod+"/task_to_hardware_mapping_best.csv")
+        if config.BOTTLENECK_ANALYSIS:
+            dump_bottleneck_analysis(dse_handler.dse.so_far_best_sim_dp, result_folder_mod)
+
         return dse_handler
 
 
@@ -184,11 +213,13 @@
     print("hw_sampling:" + str(hw_sampling))
     print("budget set to:" + str(db_input.get_budget_dict("glass")))
     unique_suffix = str(total_process_cnt) + "_" + str(current_process_id) + "_" + str(run_ctr)
-    dse_hndlr = run_FARSI(result_folder, unique_suffix, db_input, hw_sampling, sw_hw_database_population["hw_graph_mode"])
+    result_folder_mod = result_folder + "/runs/" + str(run_ctr)
+    os.system("mkdir -p " + result_folder_mod)
+    dse_hndlr = run_FARSI(result_folder, result_folder_mod, unique_suffix, db_input, hw_sampling, sw_hw_database_population["hw_graph_mode"])
 
 
     exploration_start_time = time.time()
     db_input = database_input_class(config.budgets_dict, config.other_values_dict)
     hw_sampling = {"mode": "exact", "population_size": 1}
     dse_handler = run_FARSI(db_input, hw_sampling)
-    if config.REPORT: dse_handler.dse.report(exploration_start_time); dse_handler.dse.plot_data()
+    if config.REPORT: dse_handler.dse.report(exploration_start_time, result_folder_mod); dse_handler.dse.plot_data()
