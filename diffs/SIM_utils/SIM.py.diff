--- ./Project_FARSI_orig/SIM_utils/SIM.py
+++ ./Project_FARSI/SIM_utils/SIM.py
@@ -6,14 +6,15 @@
 from SIM_utils.components.pow_sim import *
 #from OSSIM_utils.components.pow_knob_sim import *
 from design_utils.design import *
+from design_utils.des_handler import *
 from settings import config
 
 # This module is our top level simulator containing all simulators (perf, and pow simulator)
 class OSASimulator:
-    def __init__(self, dp, database, pk_dp=""):
+    def __init__(self, dp:SimDesignPoint, dh:DesignHandler, database, pk_dp=""):
         self.time_elapsed = 0  # time elapsed from the beginning of the simulation
-        self.dp = dp  # design point to simulate
-        self.perf_sim = PerformanceSimulator(self.dp)  # performance simulator instance
+        self.dp:SimDesignPoint = dp  # design point to simulate
+        self.perf_sim = PerformanceSimulator(self.dp, dh, database)  # performance simulator instance
         self.pow_sim = PowerSimulator(self.dp)  # power simulator instance
 
         self.database = database
@@ -22,7 +23,7 @@
             #self.knob_change_sim = PowerKnobSimulator(self.dp, self.pk_dp, self.database)
         self.completion_time = -1   # time passed for the simulation to complete
         self.program_status = "idle"
-        self.cur_tick_time = self.next_tick_time = 0  # current tick time
+        self.cur_tick_time = self.next_tick_time = 0.  # current tick time
 
     # ------------------------------
     # Functionality:
@@ -31,7 +32,7 @@
     def terminate(self, program_status):
         if config.termination_mode == "workload_completion":
             return program_status == "done"
-        elif config.termination_mode == "time_budget_reahced":
+        elif config.termination_mode == "time_budget_reached":
             return self.time_elapsed >= config.time_budge
         else:
             return False
@@ -48,7 +49,7 @@
     # Functionality
     #   progress the simulation for clock_time forward
     # ------------------------------
-    def step(self, clock_time):
+    def step(self, clock_time:float):
         self.next_tick_time, self.program_status = self.perf_sim.simulate(clock_time)
 
     # ------------------------------
@@ -56,7 +57,6 @@
     #   simulation
     # ------------------------------
     def simulate(self):
-        blah = time.time()
         while not self.terminate(self.program_status):
             self.tick()
             self.step(self.cur_tick_time)
@@ -65,7 +65,7 @@
             self.dp.correct_power_area_with_cacti(self.database)
 
         # collect all the stats upon completion of simulation
-        self.dp.collect_dp_stats(self.database)
+        self.dp.collect_dp_stats(self.database, self.perf_sim.bottleneck_stats_dict)
 
         if config.simulation_method == "power_knobs":
             self.knob_change_sim.launch()
